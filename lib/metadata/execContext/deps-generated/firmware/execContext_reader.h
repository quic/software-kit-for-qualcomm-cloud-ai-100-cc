// Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
// SPDX-License-Identifier: BSD-3-Clause-Clear
#ifndef EXECCONTEXT_READER_H
#define EXECCONTEXT_READER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif


typedef const struct ExecContext_execContextField_table *ExecContext_execContextField_table_t;
typedef struct ExecContext_execContextField_table *ExecContext_execContextField_mutable_table_t;
typedef const flatbuffers_uoffset_t *ExecContext_execContextField_vec_t;
typedef flatbuffers_uoffset_t *ExecContext_execContextField_mutable_vec_t;
typedef const struct ExecContext_execContext_table *ExecContext_execContext_table_t;
typedef struct ExecContext_execContext_table *ExecContext_execContext_mutable_table_t;
typedef const flatbuffers_uoffset_t *ExecContext_execContext_vec_t;
typedef flatbuffers_uoffset_t *ExecContext_execContext_mutable_vec_t;
#ifndef ExecContext_execContextField_file_identifier
#define ExecContext_execContextField_file_identifier 0
#endif
/* deprecated, use ExecContext_execContextField_file_identifier */
#ifndef ExecContext_execContextField_identifier
#define ExecContext_execContextField_identifier 0
#endif
#define ExecContext_execContextField_type_hash ((flatbuffers_thash_t)0x302a279b)
#define ExecContext_execContextField_type_identifier "\x9b\x27\x2a\x30"
#ifndef ExecContext_execContextField_file_extension
#define ExecContext_execContextField_file_extension "bin"
#endif
#ifndef ExecContext_execContext_file_identifier
#define ExecContext_execContext_file_identifier 0
#endif
/* deprecated, use ExecContext_execContext_file_identifier */
#ifndef ExecContext_execContext_identifier
#define ExecContext_execContext_identifier 0
#endif
#define ExecContext_execContext_type_hash ((flatbuffers_thash_t)0xf101ff71)
#define ExecContext_execContext_type_identifier "\x71\xff\x01\xf1"
#ifndef ExecContext_execContext_file_extension
#define ExecContext_execContext_file_extension "bin"
#endif

typedef uint32_t ExecContext_execContextVariables_enum_t;
__flatbuffers_define_integer_type(ExecContext_execContextVariables, ExecContext_execContextVariables_enum_t, 32)
#define ExecContext_execContextVariables_execContextMajorVersion ((ExecContext_execContextVariables_enum_t)UINT32_C(0))
#define ExecContext_execContextVariables_execContextMinorVersion ((ExecContext_execContextVariables_enum_t)UINT32_C(1))
#define ExecContext_execContextVariables_virtualNSPId ((ExecContext_execContextVariables_enum_t)UINT32_C(2))
#define ExecContext_execContextVariables_baseL2TCM ((ExecContext_execContextVariables_enum_t)UINT32_C(3))
#define ExecContext_execContextVariables_baseVTCM ((ExecContext_execContextVariables_enum_t)UINT32_C(4))
#define ExecContext_execContextVariables_baseConstantDataMem ((ExecContext_execContextVariables_enum_t)UINT32_C(5))
#define ExecContext_execContextVariables_baseSharedDDR ((ExecContext_execContextVariables_enum_t)UINT32_C(6))
#define ExecContext_execContextVariables_baseL2CachedDDR ((ExecContext_execContextVariables_enum_t)UINT32_C(7))
#define ExecContext_execContextVariables_mcAddresses ((ExecContext_execContextVariables_enum_t)UINT32_C(8))
#define ExecContext_execContextVariables_startTimeStamp ((ExecContext_execContextVariables_enum_t)UINT32_C(9))
#define ExecContext_execContextVariables_logFuncPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(10))
#define ExecContext_execContextVariables_exitThread ((ExecContext_execContextVariables_enum_t)UINT32_C(11))
#define ExecContext_execContextVariables_setPMUReg ((ExecContext_execContextVariables_enum_t)UINT32_C(12))
#define ExecContext_execContextVariables_errFuncPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(13))
#define ExecContext_execContextVariables_notifyHangPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(14))
#define ExecContext_execContextVariables_udmaReadFuncPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(15))
#define ExecContext_execContextVariables_mmapFuncPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(16))
#define ExecContext_execContextVariables_munmapFuncPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(17))
#define ExecContext_execContextVariables_qdssSTMPortVaddr ((ExecContext_execContextVariables_enum_t)UINT32_C(18))
#define ExecContext_execContextVariables_readPMUCnt ((ExecContext_execContextVariables_enum_t)UINT32_C(19))
#define ExecContext_execContextVariables_ddrBWMonRegVaddr ((ExecContext_execContextVariables_enum_t)UINT32_C(20))
#define ExecContext_execContextVariables_semaphoreListPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(21))
#define ExecContext_execContextVariables_networkHeapAddr ((ExecContext_execContextVariables_enum_t)UINT32_C(22))
#define ExecContext_execContextVariables_networkHeapSize ((ExecContext_execContextVariables_enum_t)UINT32_C(23))
#define ExecContext_execContextVariables_reprogMcidFuncPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(24))
#define ExecContext_execContextVariables_dlOpenPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(25))
#define ExecContext_execContextVariables_dlOpenbufPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(26))
#define ExecContext_execContextVariables_dlClosePtr ((ExecContext_execContextVariables_enum_t)UINT32_C(27))
#define ExecContext_execContextVariables_dlSymPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(28))
#define ExecContext_execContextVariables_dlAddrPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(29))
#define ExecContext_execContextVariables_dlErrorPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(30))
#define ExecContext_execContextVariables_dlInfoPtr ((ExecContext_execContextVariables_enum_t)UINT32_C(31))
#define ExecContext_execContextVariables_baseUtcOffsetDDR ((ExecContext_execContextVariables_enum_t)UINT32_C(32))

static inline const char *ExecContext_execContextVariables_name(ExecContext_execContextVariables_enum_t value)
{
    switch (value) {
    case ExecContext_execContextVariables_execContextMajorVersion: return "execContextMajorVersion";
    case ExecContext_execContextVariables_execContextMinorVersion: return "execContextMinorVersion";
    case ExecContext_execContextVariables_virtualNSPId: return "virtualNSPId";
    case ExecContext_execContextVariables_baseL2TCM: return "baseL2TCM";
    case ExecContext_execContextVariables_baseVTCM: return "baseVTCM";
    case ExecContext_execContextVariables_baseConstantDataMem: return "baseConstantDataMem";
    case ExecContext_execContextVariables_baseSharedDDR: return "baseSharedDDR";
    case ExecContext_execContextVariables_baseL2CachedDDR: return "baseL2CachedDDR";
    case ExecContext_execContextVariables_mcAddresses: return "mcAddresses";
    case ExecContext_execContextVariables_startTimeStamp: return "startTimeStamp";
    case ExecContext_execContextVariables_logFuncPtr: return "logFuncPtr";
    case ExecContext_execContextVariables_exitThread: return "exitThread";
    case ExecContext_execContextVariables_setPMUReg: return "setPMUReg";
    case ExecContext_execContextVariables_errFuncPtr: return "errFuncPtr";
    case ExecContext_execContextVariables_notifyHangPtr: return "notifyHangPtr";
    case ExecContext_execContextVariables_udmaReadFuncPtr: return "udmaReadFuncPtr";
    case ExecContext_execContextVariables_mmapFuncPtr: return "mmapFuncPtr";
    case ExecContext_execContextVariables_munmapFuncPtr: return "munmapFuncPtr";
    case ExecContext_execContextVariables_qdssSTMPortVaddr: return "qdssSTMPortVaddr";
    case ExecContext_execContextVariables_readPMUCnt: return "readPMUCnt";
    case ExecContext_execContextVariables_ddrBWMonRegVaddr: return "ddrBWMonRegVaddr";
    case ExecContext_execContextVariables_semaphoreListPtr: return "semaphoreListPtr";
    case ExecContext_execContextVariables_networkHeapAddr: return "networkHeapAddr";
    case ExecContext_execContextVariables_networkHeapSize: return "networkHeapSize";
    case ExecContext_execContextVariables_reprogMcidFuncPtr: return "reprogMcidFuncPtr";
    case ExecContext_execContextVariables_dlOpenPtr: return "dlOpenPtr";
    case ExecContext_execContextVariables_dlOpenbufPtr: return "dlOpenbufPtr";
    case ExecContext_execContextVariables_dlClosePtr: return "dlClosePtr";
    case ExecContext_execContextVariables_dlSymPtr: return "dlSymPtr";
    case ExecContext_execContextVariables_dlAddrPtr: return "dlAddrPtr";
    case ExecContext_execContextVariables_dlErrorPtr: return "dlErrorPtr";
    case ExecContext_execContextVariables_dlInfoPtr: return "dlInfoPtr";
    case ExecContext_execContextVariables_baseUtcOffsetDDR: return "baseUtcOffsetDDR";
    default: return "";
    }
}

static inline int ExecContext_execContextVariables_is_known_value(ExecContext_execContextVariables_enum_t value)
{
    switch (value) {
    case ExecContext_execContextVariables_execContextMajorVersion: return 1;
    case ExecContext_execContextVariables_execContextMinorVersion: return 1;
    case ExecContext_execContextVariables_virtualNSPId: return 1;
    case ExecContext_execContextVariables_baseL2TCM: return 1;
    case ExecContext_execContextVariables_baseVTCM: return 1;
    case ExecContext_execContextVariables_baseConstantDataMem: return 1;
    case ExecContext_execContextVariables_baseSharedDDR: return 1;
    case ExecContext_execContextVariables_baseL2CachedDDR: return 1;
    case ExecContext_execContextVariables_mcAddresses: return 1;
    case ExecContext_execContextVariables_startTimeStamp: return 1;
    case ExecContext_execContextVariables_logFuncPtr: return 1;
    case ExecContext_execContextVariables_exitThread: return 1;
    case ExecContext_execContextVariables_setPMUReg: return 1;
    case ExecContext_execContextVariables_errFuncPtr: return 1;
    case ExecContext_execContextVariables_notifyHangPtr: return 1;
    case ExecContext_execContextVariables_udmaReadFuncPtr: return 1;
    case ExecContext_execContextVariables_mmapFuncPtr: return 1;
    case ExecContext_execContextVariables_munmapFuncPtr: return 1;
    case ExecContext_execContextVariables_qdssSTMPortVaddr: return 1;
    case ExecContext_execContextVariables_readPMUCnt: return 1;
    case ExecContext_execContextVariables_ddrBWMonRegVaddr: return 1;
    case ExecContext_execContextVariables_semaphoreListPtr: return 1;
    case ExecContext_execContextVariables_networkHeapAddr: return 1;
    case ExecContext_execContextVariables_networkHeapSize: return 1;
    case ExecContext_execContextVariables_reprogMcidFuncPtr: return 1;
    case ExecContext_execContextVariables_dlOpenPtr: return 1;
    case ExecContext_execContextVariables_dlOpenbufPtr: return 1;
    case ExecContext_execContextVariables_dlClosePtr: return 1;
    case ExecContext_execContextVariables_dlSymPtr: return 1;
    case ExecContext_execContextVariables_dlAddrPtr: return 1;
    case ExecContext_execContextVariables_dlErrorPtr: return 1;
    case ExecContext_execContextVariables_dlInfoPtr: return 1;
    case ExecContext_execContextVariables_baseUtcOffsetDDR: return 1;
    default: return 0;
    }
}

typedef uint32_t ExecContext_requiredDef_enum_t;
__flatbuffers_define_integer_type(ExecContext_requiredDef, ExecContext_requiredDef_enum_t, 32)
#define ExecContext_requiredDef_required ((ExecContext_requiredDef_enum_t)UINT32_C(0))
#define ExecContext_requiredDef_optional ((ExecContext_requiredDef_enum_t)UINT32_C(1))

static inline const char *ExecContext_requiredDef_name(ExecContext_requiredDef_enum_t value)
{
    switch (value) {
    case ExecContext_requiredDef_required: return "required";
    case ExecContext_requiredDef_optional: return "optional";
    default: return "";
    }
}

static inline int ExecContext_requiredDef_is_known_value(ExecContext_requiredDef_enum_t value)
{
    switch (value) {
    case ExecContext_requiredDef_required: return 1;
    case ExecContext_requiredDef_optional: return 1;
    default: return 0;
    }
}



struct ExecContext_execContextField_table { uint8_t unused__; };

static inline size_t ExecContext_execContextField_vec_len(ExecContext_execContextField_vec_t vec)
__flatbuffers_vec_len(vec)
static inline ExecContext_execContextField_table_t ExecContext_execContextField_vec_at(ExecContext_execContextField_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(ExecContext_execContextField_table_t, vec, i, 0)
__flatbuffers_table_as_root(ExecContext_execContextField)

__flatbuffers_define_scalar_field(0, ExecContext_execContextField, variableNeeded, ExecContext_execContextVariables, ExecContext_execContextVariables_enum_t, UINT32_C(0))
__flatbuffers_define_scalar_field(1, ExecContext_execContextField, variableSize, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(2, ExecContext_execContextField, execContextOffset, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(3, ExecContext_execContextField, isRequired, ExecContext_requiredDef, ExecContext_requiredDef_enum_t, UINT32_C(0))

struct ExecContext_execContext_table { uint8_t unused__; };

static inline size_t ExecContext_execContext_vec_len(ExecContext_execContext_vec_t vec)
__flatbuffers_vec_len(vec)
static inline ExecContext_execContext_table_t ExecContext_execContext_vec_at(ExecContext_execContext_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(ExecContext_execContext_table_t, vec, i, 0)
__flatbuffers_table_as_root(ExecContext_execContext)

__flatbuffers_define_scalar_field(0, ExecContext_execContext, execContextSize, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_vector_field(1, ExecContext_execContext, execContextFields, ExecContext_execContextField_vec_t, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* EXECCONTEXT_READER_H */
