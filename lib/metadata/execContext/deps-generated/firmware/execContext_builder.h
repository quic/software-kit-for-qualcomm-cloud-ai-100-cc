// Copyright (c) 2021-2024 Qualcomm Innovation Center, Inc. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause-Clear

#ifndef EXECCONTEXT_BUILDER_H
#define EXECCONTEXT_BUILDER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef EXECCONTEXT_READER_H
#include "execContext_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __ExecContext_execContextVariables_formal_args , ExecContext_execContextVariables_enum_t v0
#define __ExecContext_execContextVariables_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, ExecContext_execContextVariables, ExecContext_execContextVariables_enum_t)
#define __ExecContext_requiredDef_formal_args , ExecContext_requiredDef_enum_t v0
#define __ExecContext_requiredDef_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, ExecContext_requiredDef, ExecContext_requiredDef_enum_t)

static const flatbuffers_voffset_t __ExecContext_execContextField_required[] = { 0 };
typedef flatbuffers_ref_t ExecContext_execContextField_ref_t;
static ExecContext_execContextField_ref_t ExecContext_execContextField_clone(flatbuffers_builder_t *B, ExecContext_execContextField_table_t t);
__flatbuffers_build_table(flatbuffers_, ExecContext_execContextField, 4)

static const flatbuffers_voffset_t __ExecContext_execContext_required[] = { 0 };
typedef flatbuffers_ref_t ExecContext_execContext_ref_t;
static ExecContext_execContext_ref_t ExecContext_execContext_clone(flatbuffers_builder_t *B, ExecContext_execContext_table_t t);
__flatbuffers_build_table(flatbuffers_, ExecContext_execContext, 2)

#define __ExecContext_execContextField_formal_args , ExecContext_execContextVariables_enum_t v0, uint32_t v1, uint64_t v2, ExecContext_requiredDef_enum_t v3
#define __ExecContext_execContextField_call_args , v0, v1, v2, v3
static inline ExecContext_execContextField_ref_t ExecContext_execContextField_create(flatbuffers_builder_t *B __ExecContext_execContextField_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, ExecContext_execContextField, ExecContext_execContextField_file_identifier, ExecContext_execContextField_type_identifier)

#define __ExecContext_execContext_formal_args , uint32_t v0, ExecContext_execContextField_vec_ref_t v1
#define __ExecContext_execContext_call_args , v0, v1
static inline ExecContext_execContext_ref_t ExecContext_execContext_create(flatbuffers_builder_t *B __ExecContext_execContext_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, ExecContext_execContext, ExecContext_execContext_file_identifier, ExecContext_execContext_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, ExecContext_execContextField_variableNeeded, ExecContext_execContextVariables, ExecContext_execContextVariables_enum_t, 4, 4, UINT32_C(0), ExecContext_execContextField)
__flatbuffers_build_scalar_field(1, flatbuffers_, ExecContext_execContextField_variableSize, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), ExecContext_execContextField)
__flatbuffers_build_scalar_field(2, flatbuffers_, ExecContext_execContextField_execContextOffset, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), ExecContext_execContextField)
__flatbuffers_build_scalar_field(3, flatbuffers_, ExecContext_execContextField_isRequired, ExecContext_requiredDef, ExecContext_requiredDef_enum_t, 4, 4, UINT32_C(0), ExecContext_execContextField)

static inline ExecContext_execContextField_ref_t ExecContext_execContextField_create(flatbuffers_builder_t *B __ExecContext_execContextField_formal_args)
{
    if (ExecContext_execContextField_start(B)
        || ExecContext_execContextField_execContextOffset_add(B, v2)
        || ExecContext_execContextField_variableNeeded_add(B, v0)
        || ExecContext_execContextField_variableSize_add(B, v1)
        || ExecContext_execContextField_isRequired_add(B, v3)) {
        return 0;
    }
    return ExecContext_execContextField_end(B);
}

static ExecContext_execContextField_ref_t ExecContext_execContextField_clone(flatbuffers_builder_t *B, ExecContext_execContextField_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (ExecContext_execContextField_start(B)
        || ExecContext_execContextField_execContextOffset_pick(B, t)
        || ExecContext_execContextField_variableNeeded_pick(B, t)
        || ExecContext_execContextField_variableSize_pick(B, t)
        || ExecContext_execContextField_isRequired_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, ExecContext_execContextField_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, ExecContext_execContext_execContextSize, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), ExecContext_execContext)
__flatbuffers_build_table_vector_field(1, flatbuffers_, ExecContext_execContext_execContextFields, ExecContext_execContextField, ExecContext_execContext)

static inline ExecContext_execContext_ref_t ExecContext_execContext_create(flatbuffers_builder_t *B __ExecContext_execContext_formal_args)
{
    if (ExecContext_execContext_start(B)
        || ExecContext_execContext_execContextSize_add(B, v0)
        || ExecContext_execContext_execContextFields_add(B, v1)) {
        return 0;
    }
    return ExecContext_execContext_end(B);
}

static ExecContext_execContext_ref_t ExecContext_execContext_clone(flatbuffers_builder_t *B, ExecContext_execContext_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (ExecContext_execContext_start(B)
        || ExecContext_execContext_execContextSize_pick(B, t)
        || ExecContext_execContext_execContextFields_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, ExecContext_execContext_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* EXECCONTEXT_BUILDER_H */
